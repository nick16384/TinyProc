Future (optional) ideas:
Simulate different access times
Add muxers / demuxers
External HW interfaces, Interrupts
Caches, virtual memory -> MMU

Mark methods with Debug_ when they are not part of the microarch and only there to provide debugging info.

Refactor RawMemory.Debug_DumpAll() to look more pleasing.

Split instruction cycles into more logical clock cycles (= Add more NextClock() wait points)
-> Currently one continuous operation: Not realistic

INC / INC2 / DEC instructions, since they perform faster with special registers outputting these values

ALU: Convert to pure logic, so that changes made to A, B, OpCode and SR propagate directly after set to R.

Warning: When changing ALU opcode changes to update bus data, respect order of operations in control unit!

New meta instructions:
STORI (Store immediate value at address in register)

Add bus and register for ALU Opcode instead of directly setting from CU.

Today:
- Change ALU opcode struct to be more usable [done]
- Add one abstract Instruction class, which all instruction type classes derive from [done]
- Remove Register ReadWriteAccess enum; Add the following bools and actually handle their cases: [done]
1. WriteAllowed (default true)
2. ErrorOnIllegalWrite (default true)
3. ReadAllowed (default true)
4. ErrorOnIllegalRead (default true)
- Change memory to use an uint[] array instead of a bool[] array [done]
- Register codes: Pack into enum with "enum RegisterCode : uint" header [done]
- Reformat internal bus code [done]
- Rename e.g. CV_P1 register to more understandable Const_Pos1 [done]
- Attach RawMemory and ConsoleMemory to Bus [in progress]
-> Fix memory being completely filled with zeroes.

- Make code C# language rule conform and as uniform as possible
-> Case of variables, preceding underscore, etc.

- Make bus easier to use by replacing adding uint[] DataAsWord fields, that throw an exception if the bus width is not 32.

- Fix errors when addresses in memory bus are set before the read enable, causing old data to be read when the read enable bit changes.