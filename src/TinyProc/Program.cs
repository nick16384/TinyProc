using TinyProc.Assembler;
using TinyProc.Application;

class Program
{
    // Note: This Main function should only be called when intending to run in CLI mode.
    static void Main(string[] args)
    {
        Console.WriteLine(
            $"\nTinyProc ver. {GlobalData.TINYPROC_PROGRAM_VERSION_STR} " +
            $"Processor revision {GlobalData.PROCESSOR_REVISION_VERSION_STR}");

        Console.WriteLine($"Arguments: {args.Length}");

        if (args.Length != 2
            || (!args[0].Equals("--assemble") && !args[0].Equals("--run")))
        {
            Console.Error.WriteLine(
                "Usage:\n" +
                "--assemble <Source file> : Creates a binary executable file in the same directory.\n" +
                "--run <Executable file> : Runs the executable file generated by the --assemble command.");
            return;
        }

        if (args[0].Equals("--assemble"))
        {
            string sourceFilePath = args[1];
            Console.WriteLine($"Assembling source file {sourceFilePath}");
            if (sourceFilePath.Trim().EndsWith(".lltp32.asm"))
                Console.Error.WriteLine("Warning: Source file name does not end with standard suffix \".lltp32.asm\".");

            string assemblyCode = File.ReadAllText(sourceFilePath);
            uint[] MAIN_PROGRAM = Assembler.AssembleToMachineCode(assemblyCode);

            ExecutableWrapper programWrapper = new(MAIN_PROGRAM);

            string outputBinaryFilePath = sourceFilePath + ".bin";
            if (sourceFilePath.EndsWith(".asm"))
                outputBinaryFilePath = sourceFilePath[..^4] + ".bin";
            programWrapper.WriteExecutableBinaryToFile(outputBinaryFilePath);

            return;
        }

        if (args[0].Equals("--run"))
        {
            string executableFilePath = args[1];

            ExecutableWrapper programWrapper = new(executableFilePath);

            Console.CancelKeyPress += delegate
            {
                Console.WriteLine("\nLeaving cycle loop and exiting...");
            };

            ExecutionContainer.Initialize(programWrapper);

            // If this program is at this stage, it is probably running in CLI mode.
            Console.WriteLine("Program ready to execute. Press enter to start first cycle.");
            while (true)
            {
                Console.ReadLine();
                ExecutionContainer.INSTANCE0.StepSingleCycle();
            }
        }
    }
}